!function($,window,undefined){function validateTransport(requestedTransport,connection){if($.isArray(requestedTransport)){for(var i=requestedTransport.length-1;i>=0;i--){var transport=requestedTransport[i];"string"===$.type(transport)&&signalR.transports[transport]||(connection.log("Invalid transport: "+transport+", removing it from the transports list."),requestedTransport.splice(i,1))}0===requestedTransport.length&&(connection.log("No transports remain within the specified transport array."),requestedTransport=null)}else if(signalR.transports[requestedTransport]||"auto"===requestedTransport){if("auto"===requestedTransport&&signalR._.ieVersion<=8)return["longPolling"]}else connection.log("Invalid transport: "+requestedTransport.toString()+"."),requestedTransport=null;return requestedTransport}function getDefaultPort(protocol){return"http:"===protocol?80:"https:"===protocol?443:void 0}function addDefaultPort(protocol,url){return url.match(/:\d+$/)?url:url+":"+getDefaultPort(protocol)}function ConnectingMessageBuffer(connection,drainCallback){var that=this,buffer=[];that.tryBuffer=function(message){return connection.state===$.signalR.connectionState.connecting&&(buffer.push(message),!0)},that.drain=function(){if(connection.state===$.signalR.connectionState.connected)for(;buffer.length>0;)drainCallback(buffer.shift())},that.clear=function(){buffer=[]}}var resources={nojQuery:"jQuery was not found. Please ensure jQuery is referenced before the SignalR client JavaScript file.",noTransportOnInit:"No transport could be initialized successfully. Try specifying a different transport or none at all for auto initialization.",errorOnNegotiate:"Error during negotiation request.",stoppedWhileLoading:"The connection was stopped during page load.",stoppedWhileNegotiating:"The connection was stopped during the negotiate request.",errorParsingNegotiateResponse:"Error parsing negotiate response.",errorDuringStartRequest:"Error during start request. Stopping the connection.",stoppedDuringStartRequest:"The connection was stopped during the start request.",errorParsingStartResponse:"Error parsing start response: '{0}'. Stopping the connection.",invalidStartResponse:"Invalid start response: '{0}'. Stopping the connection.",protocolIncompatible:"You are using a version of the client that isn't compatible with the server. Client version {0}, server version {1}.",sendFailed:"Send failed.",parseFailed:"Failed at parsing response: {0}",longPollFailed:"Long polling request failed.",eventSourceFailedToConnect:"EventSource failed to connect.",eventSourceError:"Error raised by EventSource",webSocketClosed:"WebSocket closed.",pingServerFailedInvalidResponse:"Invalid ping response when pinging server: '{0}'.",pingServerFailed:"Failed to ping server.",pingServerFailedStatusCode:"Failed to ping server.  Server responded with status code {0}, stopping the connection.",pingServerFailedParse:"Failed to parse ping server response, stopping the connection.",noConnectionTransport:"Connection is in an invalid state, there is no transport active.",webSocketsInvalidState:"The Web Socket transport is in an invalid state, transitioning into reconnecting.",reconnectTimeout:"Couldn't reconnect within the configured timeout of {0} ms, disconnecting.",reconnectWindowTimeout:"The client has been inactive since {0} and it has exceeded the inactivity timeout of {1} ms. Stopping the connection."};if("function"!=typeof $)throw new Error(resources.nojQuery);var signalR,_connection,_pageLoaded="complete"===window.document.readyState,_pageWindow=$(window),_negotiateAbortText="__Negotiate Aborted__",events={onStart:"onStart",onStarting:"onStarting",onReceived:"onReceived",onError:"onError",onConnectionSlow:"onConnectionSlow",onReconnecting:"onReconnecting",onReconnect:"onReconnect",onStateChanged:"onStateChanged",onDisconnect:"onDisconnect"},ajaxDefaults={processData:!0,timeout:null,async:!0,global:!1,cache:!1},log=function(msg,logging){if(logging!==!1){var m;"undefined"!=typeof window.console&&(m="["+(new Date).toTimeString()+"] SignalR: "+msg,window.console.debug?window.console.debug(m):window.console.log&&window.console.log(m))}},changeState=function(connection,expectedState,newState){return expectedState===connection.state&&(connection.state=newState,$(connection).triggerHandler(events.onStateChanged,[{oldState:expectedState,newState:newState}]),!0)},isDisconnecting=function(connection){return connection.state===signalR.connectionState.disconnected},supportsKeepAlive=function(connection){return connection._.keepAliveData.activated&&connection.transport.supportsKeepAlive(connection)},configureStopReconnectingTimeout=function(connection){var stopReconnectingTimeout,onReconnectTimeout;connection._.configuredStopReconnectingTimeout||(onReconnectTimeout=function(connection){var message=signalR._.format(signalR.resources.reconnectTimeout,connection.disconnectTimeout);connection.log(message),$(connection).triggerHandler(events.onError,[signalR._.error(message,"TimeoutException")]),connection.stop(!1,!1)},connection.reconnecting(function(){var connection=this;connection.state===signalR.connectionState.reconnecting&&(stopReconnectingTimeout=window.setTimeout(function(){onReconnectTimeout(connection)},connection.disconnectTimeout))}),connection.stateChanged(function(data){data.oldState===signalR.connectionState.reconnecting&&window.clearTimeout(stopReconnectingTimeout)}),connection._.configuredStopReconnectingTimeout=!0)};signalR=function(url,qs,logging){return new signalR.fn.init(url,qs,logging)},signalR._={defaultContentType:"application/x-www-form-urlencoded; charset=UTF-8",ieVersion:function(){var version,matches;return"Microsoft Internet Explorer"===window.navigator.appName&&(matches=/MSIE ([0-9]+\.[0-9]+)/.exec(window.navigator.userAgent),matches&&(version=window.parseFloat(matches[1]))),version}(),error:function(message,source,context){var e=new Error(message);return e.source=source,"undefined"!=typeof context&&(e.context=context),e},transportError:function(message,transport,source,context){var e=this.error(message,source,context);return e.transport=transport?transport.name:undefined,e},format:function(){for(var s=arguments[0],i=0;i<arguments.length-1;i++)s=s.replace("{"+i+"}",arguments[i+1]);return s},firefoxMajorVersion:function(userAgent){var matches=userAgent.match(/Firefox\/(\d+)/);return!matches||!matches.length||matches.length<2?0:parseInt(matches[1],10)},configurePingInterval:function(connection){var config=connection._.config,onFail=function(error){$(connection).triggerHandler(events.onError,[error])};config&&!connection._.pingIntervalId&&config.pingInterval&&(connection._.pingIntervalId=window.setInterval(function(){signalR.transports._logic.pingServer(connection).fail(onFail)},config.pingInterval))}},signalR.events=events,signalR.resources=resources,signalR.ajaxDefaults=ajaxDefaults,signalR.changeState=changeState,signalR.isDisconnecting=isDisconnecting,signalR.connectionState={connecting:0,connected:1,reconnecting:2,disconnected:4},signalR.hub={start:function(){throw new Error("SignalR: Error loading hubs. Ensure your hubs reference is correct, e.g. <script src='/signalr/js'></script>.")}},"function"==typeof _pageWindow.on?_pageWindow.on("load",function(){_pageLoaded=!0}):_pageWindow.load(function(){_pageLoaded=!0}),signalR.fn=signalR.prototype={init:function(url,qs,logging){var $connection=$(this);this.url=url,this.qs=qs,this.lastError=null,this._={keepAliveData:{},connectingMessageBuffer:new ConnectingMessageBuffer(this,function(message){$connection.triggerHandler(events.onReceived,[message])}),lastMessageAt:(new Date).getTime(),lastActiveAt:(new Date).getTime(),beatInterval:5e3,beatHandle:null,totalTransportConnectTimeout:0},"boolean"==typeof logging&&(this.logging=logging)},_parseResponse:function(response){var that=this;return response&&"string"==typeof response?that.json.parse(response):response},_originalJson:window.JSON,json:window.JSON,isCrossDomain:function(url,against){var link;return url=$.trim(url),against=against||window.location,0===url.indexOf("http")&&(link=window.document.createElement("a"),link.href=url,link.protocol+addDefaultPort(link.protocol,link.host)!==against.protocol+addDefaultPort(against.protocol,against.host))},ajaxDataType:"text",contentType:"application/json; charset=UTF-8",logging:!1,state:signalR.connectionState.disconnected,clientProtocol:"1.5",reconnectDelay:2e3,transportConnectTimeout:0,disconnectTimeout:3e4,reconnectWindow:3e4,keepAliveWarnAt:2/3,start:function(options,callback){var initialize,connection=this,config={pingInterval:3e5,waitForPageLoad:!0,transport:"auto",jsonp:!1},deferred=connection._deferral||$.Deferred(),parser=window.document.createElement("a");if(connection.lastError=null,connection._deferral=deferred,!connection.json)throw new Error("SignalR: No JSON parser found. Please ensure json2.js is referenced before the SignalR.js file if you need to support clients without native JSON parsing support, e.g. IE<8.");if("function"===$.type(options)?callback=options:"object"===$.type(options)&&($.extend(config,options),"function"===$.type(config.callback)&&(callback=config.callback)),config.transport=validateTransport(config.transport,connection),!config.transport)throw new Error("SignalR: Invalid transport(s) specified, aborting start.");if(connection._.config=config,!_pageLoaded&&config.waitForPageLoad===!0)return connection._.deferredStartHandler=function(){connection.start(options,callback)},_pageWindow.bind("load",connection._.deferredStartHandler),deferred.promise();if(connection.state===signalR.connectionState.connecting)return deferred.promise();if(changeState(connection,signalR.connectionState.disconnected,signalR.connectionState.connecting)===!1)return deferred.resolve(connection),deferred.promise();configureStopReconnectingTimeout(connection),parser.href=connection.url,parser.protocol&&":"!==parser.protocol?(connection.protocol=parser.protocol,connection.host=parser.host):(connection.protocol=window.document.location.protocol,connection.host=parser.host||window.document.location.host),connection.baseUrl=connection.protocol+"//"+connection.host,connection.wsProtocol="https:"===connection.protocol?"wss://":"ws://","auto"===config.transport&&config.jsonp===!0&&(config.transport="longPolling"),0===connection.url.indexOf("//")&&(connection.url=window.location.protocol+connection.url,connection.log("Protocol relative URL detected, normalizing it to '"+connection.url+"'.")),this.isCrossDomain(connection.url)&&(connection.log("Auto detected cross domain url."),"auto"===config.transport&&(config.transport=["webSockets","serverSentEvents","longPolling"]),"undefined"==typeof config.withCredentials&&(config.withCredentials=!0),config.jsonp||(config.jsonp=!$.support.cors,config.jsonp&&connection.log("Using jsonp because this browser doesn't support CORS.")),connection.contentType=signalR._.defaultContentType),connection.withCredentials=config.withCredentials,connection.ajaxDataType=config.jsonp?"jsonp":"text",$(connection).bind(events.onStart,function(){"function"===$.type(callback)&&callback.call(connection),deferred.resolve(connection)}),connection._.initHandler=signalR.transports._logic.initHandler(connection),initialize=function(transports,index){var noTransportError=signalR._.error(resources.noTransportOnInit);if(index=index||0,index>=transports.length)return 0===index?connection.log("No transports supported by the server were selected."):1===index?connection.log("No fallback transports were selected."):connection.log("Fallback transports exhausted."),$(connection).triggerHandler(events.onError,[noTransportError]),deferred.reject(noTransportError),void connection.stop();if(connection.state!==signalR.connectionState.disconnected){var transportName=transports[index],transport=signalR.transports[transportName],onFallback=function(){initialize(transports,index+1)};connection.transport=transport;try{connection._.initHandler.start(transport,function(){var isFirefox11OrGreater=signalR._.firefoxMajorVersion(window.navigator.userAgent)>=11,asyncAbort=!!connection.withCredentials&&isFirefox11OrGreater;connection.log("The start request succeeded. Transitioning to the connected state."),supportsKeepAlive(connection)&&signalR.transports._logic.monitorKeepAlive(connection),signalR.transports._logic.startHeartbeat(connection),signalR._.configurePingInterval(connection),changeState(connection,signalR.connectionState.connecting,signalR.connectionState.connected)||connection.log("WARNING! The connection was not in the connecting state."),connection._.connectingMessageBuffer.drain(),$(connection).triggerHandler(events.onStart),_pageWindow.bind("unload",function(){connection.log("Window unloading, stopping the connection."),connection.stop(asyncAbort)}),isFirefox11OrGreater&&_pageWindow.bind("beforeunload",function(){window.setTimeout(function(){connection.stop(asyncAbort)},0)})},onFallback)}catch(error){connection.log(transport.name+" transport threw '"+error.message+"' when attempting to start."),onFallback()}}};var url=connection.url+"/negotiate",onFailed=function(error,connection){var err=signalR._.error(resources.errorOnNegotiate,error,connection._.negotiateRequest);$(connection).triggerHandler(events.onError,err),deferred.reject(err),connection.stop()};return $(connection).triggerHandler(events.onStarting),url=signalR.transports._logic.prepareQueryString(connection,url),connection.log("Negotiating with '"+url+"'."),connection._.negotiateRequest=signalR.transports._logic.ajax(connection,{url:url,error:function(error,statusText){statusText!==_negotiateAbortText?onFailed(error,connection):deferred.reject(signalR._.error(resources.stoppedWhileNegotiating,null,connection._.negotiateRequest))},success:function(result){var res,keepAliveData,protocolError,transports=[],supportedTransports=[];try{res=connection._parseResponse(result)}catch(error){return void onFailed(signalR._.error(resources.errorParsingNegotiateResponse,error),connection)}return keepAliveData=connection._.keepAliveData,connection.appRelativeUrl=res.Url,connection.id=res.ConnectionId,connection.token=res.ConnectionToken,connection.webSocketServerUrl=res.WebSocketServerUrl,connection._.pollTimeout=1e3*res.ConnectionTimeout+1e4,connection.disconnectTimeout=1e3*res.DisconnectTimeout,connection._.totalTransportConnectTimeout=connection.transportConnectTimeout+1e3*res.TransportConnectTimeout,res.KeepAliveTimeout?(keepAliveData.activated=!0,keepAliveData.timeout=1e3*res.KeepAliveTimeout,keepAliveData.timeoutWarning=keepAliveData.timeout*connection.keepAliveWarnAt,connection._.beatInterval=(keepAliveData.timeout-keepAliveData.timeoutWarning)/3):keepAliveData.activated=!1,connection.reconnectWindow=connection.disconnectTimeout+(keepAliveData.timeout||0),res.ProtocolVersion&&res.ProtocolVersion===connection.clientProtocol?($.each(signalR.transports,function(key){return 0===key.indexOf("_")||"webSockets"===key&&!res.TryWebSockets||void supportedTransports.push(key)}),$.isArray(config.transport)?$.each(config.transport,function(_,transport){$.inArray(transport,supportedTransports)>=0&&transports.push(transport)}):"auto"===config.transport?transports=supportedTransports:$.inArray(config.transport,supportedTransports)>=0&&transports.push(config.transport),void initialize(transports)):(protocolError=signalR._.error(signalR._.format(resources.protocolIncompatible,connection.clientProtocol,res.ProtocolVersion)),$(connection).triggerHandler(events.onError,[protocolError]),void deferred.reject(protocolError))}}),deferred.promise()},starting:function(callback){var connection=this;return $(connection).bind(events.onStarting,function(){callback.call(connection)}),connection},send:function(data){var connection=this;if(connection.state===signalR.connectionState.disconnected)throw new Error("SignalR: Connection must be started before data can be sent. Call .start() before .send()");if(connection.state===signalR.connectionState.connecting)throw new Error("SignalR: Connection has not been fully initialized. Use .start().done() or .start().fail() to run logic after the connection has started.");return connection.transport.send(connection,data),connection},received:function(callback){var connection=this;return $(connection).bind(events.onReceived,function(e,data){callback.call(connection,data)}),connection},stateChanged:function(callback){var connection=this;return $(connection).bind(events.onStateChanged,function(e,data){callback.call(connection,data)}),connection},error:function(callback){var connection=this;return $(connection).bind(events.onError,function(e,errorData,sendData){connection.lastError=errorData,callback.call(connection,errorData,sendData)}),connection},disconnected:function(callback){var connection=this;return $(connection).bind(events.onDisconnect,function(){callback.call(connection)}),connection},connectionSlow:function(callback){var connection=this;return $(connection).bind(events.onConnectionSlow,function(){callback.call(connection)}),connection},reconnecting:function(callback){var connection=this;return $(connection).bind(events.onReconnecting,function(){callback.call(connection)}),connection},reconnected:function(callback){var connection=this;return $(connection).bind(events.onReconnect,function(){callback.call(connection)}),connection},stop:function(async,notifyServer){var connection=this,deferral=connection._deferral;return connection._.deferredStartHandler&&_pageWindow.unbind("load",connection._.deferredStartHandler),delete connection._.config,delete connection._.deferredStartHandler,_pageLoaded||connection._.config&&connection._.config.waitForPageLoad!==!0?connection.state!==signalR.connectionState.disconnected?(connection.log("Stopping connection."),window.clearTimeout(connection._.beatHandle),window.clearInterval(connection._.pingIntervalId),connection.transport&&(connection.transport.stop(connection),notifyServer!==!1&&connection.transport.abort(connection,async),supportsKeepAlive(connection)&&signalR.transports._logic.stopMonitoringKeepAlive(connection),connection.transport=null),connection._.negotiateRequest&&(connection._.negotiateRequest.abort(_negotiateAbortText),delete connection._.negotiateRequest),connection._.initHandler&&connection._.initHandler.stop(),delete connection._deferral,delete connection.messageId,delete connection.groupsToken,delete connection.id,delete connection._.pingIntervalId,delete connection._.lastMessageAt,delete connection._.lastActiveAt,connection._.connectingMessageBuffer.clear(),changeState(connection,connection.state,signalR.connectionState.disconnected),$(connection).triggerHandler(events.onDisconnect),connection):void 0:(connection.log("Stopping connection prior to negotiate."),void(deferral&&deferral.reject(signalR._.error(resources.stoppedWhileLoading))))},log:function(msg){log(msg,this.logging)}},signalR.fn.init.prototype=signalR.fn,signalR.noConflict=function(){return $.connection===signalR&&($.connection=_connection),signalR},$.connection&&(_connection=$.connection),$.connection=$.signalR=signalR}(window.jQuery,window),function($,window,undefined){function beat(connection){connection._.keepAliveData.monitoring&&checkIfAlive(connection),transportLogic.markActive(connection)&&(connection._.beatHandle=window.setTimeout(function(){beat(connection)},connection._.beatInterval))}function checkIfAlive(connection){var timeElapsed,keepAliveData=connection._.keepAliveData;connection.state===signalR.connectionState.connected&&(timeElapsed=(new Date).getTime()-connection._.lastMessageAt,timeElapsed>=keepAliveData.timeout?(connection.log("Keep alive timed out.  Notifying transport that connection has been lost."),connection.transport.lostConnection(connection)):timeElapsed>=keepAliveData.timeoutWarning?keepAliveData.userNotified||(connection.log("Keep alive has been missed, connection may be dead/slow."),$(connection).triggerHandler(events.onConnectionSlow),keepAliveData.userNotified=!0):keepAliveData.userNotified=!1)}function getAjaxUrl(connection,path){var url=connection.url+path;return connection.transport&&(url+="?transport="+connection.transport.name),transportLogic.prepareQueryString(connection,url)}function InitHandler(connection){this.connection=connection,this.startRequested=!1,this.startCompleted=!1,this.connectionStopped=!1}var transportLogic,signalR=$.signalR,events=$.signalR.events,changeState=$.signalR.changeState,startAbortText="__Start Aborted__";signalR.transports={},InitHandler.prototype={start:function(transport,onSuccess,onFallback){var that=this,connection=that.connection,failCalled=!1;return that.startRequested||that.connectionStopped?void connection.log("WARNING! "+transport.name+" transport cannot be started. Initialization ongoing or completed."):(connection.log(transport.name+" transport starting."),transport.start(connection,function(){failCalled||that.initReceived(transport,onSuccess)},function(error){return failCalled||(failCalled=!0,that.transportFailed(transport,error,onFallback)),!that.startCompleted||that.connectionStopped}),void(that.transportTimeoutHandle=window.setTimeout(function(){failCalled||(failCalled=!0,connection.log(transport.name+" transport timed out when trying to connect."),that.transportFailed(transport,undefined,onFallback))},connection._.totalTransportConnectTimeout)))},stop:function(){this.connectionStopped=!0,window.clearTimeout(this.transportTimeoutHandle),signalR.transports._logic.tryAbortStartRequest(this.connection)},initReceived:function(transport,onSuccess){var that=this,connection=that.connection;return that.startRequested?void connection.log("WARNING! The client received multiple init messages."):void(that.connectionStopped||(that.startRequested=!0,window.clearTimeout(that.transportTimeoutHandle),connection.log(transport.name+" transport connected. Initiating start request."),signalR.transports._logic.ajaxStart(connection,function(){that.startCompleted=!0,onSuccess()})))},transportFailed:function(transport,error,onFallback){var wrappedError,connection=this.connection,deferred=connection._deferral;this.connectionStopped||(window.clearTimeout(this.transportTimeoutHandle),this.startRequested?this.startCompleted||(wrappedError=signalR._.error(signalR.resources.errorDuringStartRequest,error),connection.log(transport.name+" transport failed during the start request. Stopping the connection."),$(connection).triggerHandler(events.onError,[wrappedError]),deferred&&deferred.reject(wrappedError),connection.stop()):(transport.stop(connection),connection.log(transport.name+" transport failed to connect. Attempting to fall back."),onFallback()))}},transportLogic=signalR.transports._logic={ajax:function(connection,options){return $.ajax($.extend(!0,{},$.signalR.ajaxDefaults,{type:"GET",data:{},xhrFields:{withCredentials:connection.withCredentials},contentType:connection.contentType,dataType:connection.ajaxDataType},options))},pingServer:function(connection){var url,xhr,deferral=$.Deferred();return connection.transport?(url=connection.url+"/ping",url=transportLogic.addQs(url,connection.qs),xhr=transportLogic.ajax(connection,{url:url,success:function(result){var data;try{data=connection._parseResponse(result)}catch(error){return deferral.reject(signalR._.transportError(signalR.resources.pingServerFailedParse,connection.transport,error,xhr)),void connection.stop()}"pong"===data.Response?deferral.resolve():deferral.reject(signalR._.transportError(signalR._.format(signalR.resources.pingServerFailedInvalidResponse,result),connection.transport,null,xhr))},error:function(error){401===error.status||403===error.status?(deferral.reject(signalR._.transportError(signalR._.format(signalR.resources.pingServerFailedStatusCode,error.status),connection.transport,error,xhr)),connection.stop()):deferral.reject(signalR._.transportError(signalR.resources.pingServerFailed,connection.transport,error,xhr))}})):deferral.reject(signalR._.transportError(signalR.resources.noConnectionTransport,connection.transport)),deferral.promise()},prepareQueryString:function(connection,url){var preparedUrl;return preparedUrl=transportLogic.addQs(url,"clientProtocol="+connection.clientProtocol),preparedUrl=transportLogic.addQs(preparedUrl,connection.qs),connection.token&&(preparedUrl+="&connectionToken="+window.encodeURIComponent(connection.token)),connection.data&&(preparedUrl+="&connectionData="+window.encodeURIComponent(connection.data)),preparedUrl},addQs:function(url,qs){var firstChar,appender=url.indexOf("?")!==-1?"&":"?";if(!qs)return url;if("object"==typeof qs)return url+appender+$.param(qs);if("string"==typeof qs)return firstChar=qs.charAt(0),"?"!==firstChar&&"&"!==firstChar||(appender=""),url+appender+qs;throw new Error("Query string property must be either a string or object.")},getUrl:function(connection,transport,reconnecting,poll,ajaxPost){var baseUrl="webSockets"===transport?"":connection.baseUrl,url=baseUrl+connection.appRelativeUrl,qs="transport="+transport;return!ajaxPost&&connection.groupsToken&&(qs+="&groupsToken="+window.encodeURIComponent(connection.groupsToken)),reconnecting?(url+=poll?"/poll":"/reconnect",!ajaxPost&&connection.messageId&&(qs+="&messageId="+window.encodeURIComponent(connection.messageId))):url+="/connect",url+="?"+qs,url=transportLogic.prepareQueryString(connection,url),ajaxPost||(url+="&tid="+Math.floor(11*Math.random())),url},maximizePersistentResponse:function(minPersistentResponse){return{MessageId:minPersistentResponse.C,Messages:minPersistentResponse.M,Initialized:"undefined"!=typeof minPersistentResponse.S,ShouldReconnect:"undefined"!=typeof minPersistentResponse.T,LongPollDelay:minPersistentResponse.L,GroupsToken:minPersistentResponse.G}},updateGroups:function(connection,groupsToken){groupsToken&&(connection.groupsToken=groupsToken)},stringifySend:function(connection,message){return"string"==typeof message||"undefined"==typeof message||null===message?message:connection.json.stringify(message)},ajaxSend:function(connection,data){var xhr,payload=transportLogic.stringifySend(connection,data),url=getAjaxUrl(connection,"/send"),onFail=function(error,connection){$(connection).triggerHandler(events.onError,[signalR._.transportError(signalR.resources.sendFailed,connection.transport,error,xhr),data])};return xhr=transportLogic.ajax(connection,{url:url,type:"jsonp"===connection.ajaxDataType?"GET":"POST",contentType:signalR._.defaultContentType,data:{data:payload},success:function(result){var res;if(result){try{res=connection._parseResponse(result)}catch(error){return onFail(error,connection),void connection.stop()}transportLogic.triggerReceived(connection,res)}},error:function(error,textStatus){"abort"!==textStatus&&"parsererror"!==textStatus&&onFail(error,connection)}})},ajaxAbort:function(connection,async){if("undefined"!=typeof connection.transport){async="undefined"==typeof async||async;var url=getAjaxUrl(connection,"/abort");transportLogic.ajax(connection,{url:url,async:async,timeout:1e3,type:"POST"}),connection.log("Fired ajax abort async = "+async+".")}},ajaxStart:function(connection,onSuccess){var rejectDeferred=function(error){var deferred=connection._deferral;deferred&&deferred.reject(error)},triggerStartError=function(error){connection.log("The start request failed. Stopping the connection."),$(connection).triggerHandler(events.onError,[error]),rejectDeferred(error),connection.stop()};connection._.startRequest=transportLogic.ajax(connection,{url:getAjaxUrl(connection,"/start"),success:function(result,statusText,xhr){var data;try{data=connection._parseResponse(result)}catch(error){return void triggerStartError(signalR._.error(signalR._.format(signalR.resources.errorParsingStartResponse,result),error,xhr))}"started"===data.Response?onSuccess():triggerStartError(signalR._.error(signalR._.format(signalR.resources.invalidStartResponse,result),null,xhr))},error:function(xhr,statusText,error){statusText!==startAbortText?triggerStartError(signalR._.error(signalR.resources.errorDuringStartRequest,error,xhr)):(connection.log("The start request aborted because connection.stop() was called."),rejectDeferred(signalR._.error(signalR.resources.stoppedDuringStartRequest,null,xhr)))}})},tryAbortStartRequest:function(connection){connection._.startRequest&&(connection._.startRequest.abort(startAbortText),delete connection._.startRequest)},tryInitialize:function(connection,persistentResponse,onInitialized){persistentResponse.Initialized&&onInitialized?onInitialized():persistentResponse.Initialized&&connection.log("WARNING! The client received an init message after reconnecting.")},triggerReceived:function(connection,data){connection._.connectingMessageBuffer.tryBuffer(data)||$(connection).triggerHandler(events.onReceived,[data])},processMessages:function(connection,minData,onInitialized){var data;transportLogic.markLastMessage(connection),minData&&(data=transportLogic.maximizePersistentResponse(minData),transportLogic.updateGroups(connection,data.GroupsToken),data.MessageId&&(connection.messageId=data.MessageId),data.Messages&&($.each(data.Messages,function(index,message){transportLogic.triggerReceived(connection,message)}),transportLogic.tryInitialize(connection,data,onInitialized)))},monitorKeepAlive:function(connection){var keepAliveData=connection._.keepAliveData;keepAliveData.monitoring?connection.log("Tried to monitor keep alive but it's already being monitored."):(keepAliveData.monitoring=!0,transportLogic.markLastMessage(connection),connection._.keepAliveData.reconnectKeepAliveUpdate=function(){transportLogic.markLastMessage(connection)},$(connection).bind(events.onReconnect,connection._.keepAliveData.reconnectKeepAliveUpdate),connection.log("Now monitoring keep alive with a warning timeout of "+keepAliveData.timeoutWarning+", keep alive timeout of "+keepAliveData.timeout+" and disconnecting timeout of "+connection.disconnectTimeout))},stopMonitoringKeepAlive:function(connection){var keepAliveData=connection._.keepAliveData;keepAliveData.monitoring&&(keepAliveData.monitoring=!1,$(connection).unbind(events.onReconnect,connection._.keepAliveData.reconnectKeepAliveUpdate),connection._.keepAliveData={},connection.log("Stopping the monitoring of the keep alive."))},startHeartbeat:function(connection){connection._.lastActiveAt=(new Date).getTime(),beat(connection)},markLastMessage:function(connection){connection._.lastMessageAt=(new Date).getTime()},markActive:function(connection){return!!transportLogic.verifyLastActive(connection)&&(connection._.lastActiveAt=(new Date).getTime(),!0)},isConnectedOrReconnecting:function(connection){return connection.state===signalR.connectionState.connected||connection.state===signalR.connectionState.reconnecting},ensureReconnectingState:function(connection){return changeState(connection,signalR.connectionState.connected,signalR.connectionState.reconnecting)===!0&&$(connection).triggerHandler(events.onReconnecting),connection.state===signalR.connectionState.reconnecting},clearReconnectTimeout:function(connection){connection&&connection._.reconnectTimeout&&(window.clearTimeout(connection._.reconnectTimeout),delete connection._.reconnectTimeout)},verifyLastActive:function(connection){if((new Date).getTime()-connection._.lastActiveAt>=connection.reconnectWindow){var message=signalR._.format(signalR.resources.reconnectWindowTimeout,new Date(connection._.lastActiveAt),connection.reconnectWindow);return connection.log(message),$(connection).triggerHandler(events.onError,[signalR._.error(message,"TimeoutException")]),connection.stop(!1,!1),!1}return!0},reconnect:function(connection,transportName){var transport=signalR.transports[transportName];if(transportLogic.isConnectedOrReconnecting(connection)&&!connection._.reconnectTimeout){if(!transportLogic.verifyLastActive(connection))return;connection._.reconnectTimeout=window.setTimeout(function(){transportLogic.verifyLastActive(connection)&&(transport.stop(connection),transportLogic.ensureReconnectingState(connection)&&(connection.log(transportName+" reconnecting."),transport.start(connection)));
},connection.reconnectDelay)}},handleParseFailure:function(connection,result,error,onFailed,context){var wrappedError=signalR._.transportError(signalR._.format(signalR.resources.parseFailed,result),connection.transport,error,context);onFailed&&onFailed(wrappedError)?connection.log("Failed to parse server response while attempting to connect."):($(connection).triggerHandler(events.onError,[wrappedError]),connection.stop())},initHandler:function(connection){return new InitHandler(connection)},foreverFrame:{count:0,connections:{}}}}(window.jQuery,window),function($,window){var signalR=$.signalR,events=$.signalR.events,changeState=$.signalR.changeState,transportLogic=signalR.transports._logic;signalR.transports.webSockets={name:"webSockets",supportsKeepAlive:function(){return!0},send:function(connection,data){var payload=transportLogic.stringifySend(connection,data);try{connection.socket.send(payload)}catch(ex){$(connection).triggerHandler(events.onError,[signalR._.transportError(signalR.resources.webSocketsInvalidState,connection.transport,ex,connection.socket),data])}},start:function(connection,onSuccess,onFailed){var url,opened=!1,that=this,reconnecting=!onSuccess,$connection=$(connection);return window.WebSocket?void(connection.socket||(url=connection.webSocketServerUrl?connection.webSocketServerUrl:connection.wsProtocol+connection.host,url+=transportLogic.getUrl(connection,this.name,reconnecting),connection.log("Connecting to websocket endpoint '"+url+"'."),connection.socket=new window.WebSocket(url),connection.socket.onopen=function(){opened=!0,connection.log("Websocket opened."),transportLogic.clearReconnectTimeout(connection),changeState(connection,signalR.connectionState.reconnecting,signalR.connectionState.connected)===!0&&$connection.triggerHandler(events.onReconnect)},connection.socket.onclose=function(event){var error;this===connection.socket&&(opened&&"undefined"!=typeof event.wasClean&&event.wasClean===!1?(error=signalR._.transportError(signalR.resources.webSocketClosed,connection.transport,event),connection.log("Unclean disconnect from websocket: "+(event.reason||"[no reason given]."))):connection.log("Websocket closed."),onFailed&&onFailed(error)||(error&&$(connection).triggerHandler(events.onError,[error]),that.reconnect(connection)))},connection.socket.onmessage=function(event){var data;try{data=connection._parseResponse(event.data)}catch(error){return void transportLogic.handleParseFailure(connection,event.data,error,onFailed,event)}data&&($.isEmptyObject(data)||data.M?transportLogic.processMessages(connection,data,onSuccess):transportLogic.triggerReceived(connection,data))})):void onFailed()},reconnect:function(connection){transportLogic.reconnect(connection,this.name)},lostConnection:function(connection){this.reconnect(connection)},stop:function(connection){transportLogic.clearReconnectTimeout(connection),connection.socket&&(connection.log("Closing the Websocket."),connection.socket.close(),connection.socket=null)},abort:function(connection,async){transportLogic.ajaxAbort(connection,async)}}}(window.jQuery,window),function($,window){var signalR=$.signalR,events=$.signalR.events,changeState=$.signalR.changeState,transportLogic=signalR.transports._logic,clearReconnectAttemptTimeout=function(connection){window.clearTimeout(connection._.reconnectAttemptTimeoutHandle),delete connection._.reconnectAttemptTimeoutHandle};signalR.transports.serverSentEvents={name:"serverSentEvents",supportsKeepAlive:function(){return!0},timeOut:3e3,start:function(connection,onSuccess,onFailed){var url,that=this,opened=!1,$connection=$(connection),reconnecting=!onSuccess;if(connection.eventSource&&(connection.log("The connection already has an event source. Stopping it."),connection.stop()),!window.EventSource)return void(onFailed&&(connection.log("This browser doesn't support SSE."),onFailed()));url=transportLogic.getUrl(connection,this.name,reconnecting);try{connection.log("Attempting to connect to SSE endpoint '"+url+"'."),connection.eventSource=new window.EventSource(url,{withCredentials:connection.withCredentials})}catch(e){return connection.log("EventSource failed trying to connect with error "+e.Message+"."),void(onFailed?onFailed():($connection.triggerHandler(events.onError,[signalR._.transportError(signalR.resources.eventSourceFailedToConnect,connection.transport,e)]),reconnecting&&that.reconnect(connection)))}reconnecting&&(connection._.reconnectAttemptTimeoutHandle=window.setTimeout(function(){opened===!1&&connection.eventSource.readyState!==window.EventSource.OPEN&&that.reconnect(connection)},that.timeOut)),connection.eventSource.addEventListener("open",function(){connection.log("EventSource connected."),clearReconnectAttemptTimeout(connection),transportLogic.clearReconnectTimeout(connection),opened===!1&&(opened=!0,changeState(connection,signalR.connectionState.reconnecting,signalR.connectionState.connected)===!0&&$connection.triggerHandler(events.onReconnect))},!1),connection.eventSource.addEventListener("message",function(e){var res;if("initialized"!==e.data){try{res=connection._parseResponse(e.data)}catch(error){return void transportLogic.handleParseFailure(connection,e.data,error,onFailed,e)}transportLogic.processMessages(connection,res,onSuccess)}},!1),connection.eventSource.addEventListener("error",function(e){var error=signalR._.transportError(signalR.resources.eventSourceError,connection.transport,e);this===connection.eventSource&&(onFailed&&onFailed(error)||(connection.log("EventSource readyState: "+connection.eventSource.readyState+"."),e.eventPhase===window.EventSource.CLOSED?(connection.log("EventSource reconnecting due to the server connection ending."),that.reconnect(connection)):(connection.log("EventSource error."),$connection.triggerHandler(events.onError,[error]))))},!1)},reconnect:function(connection){transportLogic.reconnect(connection,this.name)},lostConnection:function(connection){this.reconnect(connection)},send:function(connection,data){transportLogic.ajaxSend(connection,data)},stop:function(connection){clearReconnectAttemptTimeout(connection),transportLogic.clearReconnectTimeout(connection),connection&&connection.eventSource&&(connection.log("EventSource calling close()."),connection.eventSource.close(),connection.eventSource=null,delete connection.eventSource)},abort:function(connection,async){transportLogic.ajaxAbort(connection,async)}}}(window.jQuery,window),function($,window){var signalR=$.signalR,events=$.signalR.events,changeState=$.signalR.changeState,transportLogic=signalR.transports._logic,createFrame=function(){var frame=window.document.createElement("iframe");return frame.setAttribute("style","position:absolute;top:0;left:0;width:0;height:0;visibility:hidden;"),frame},loadPreventer=function(){var loadingFixIntervalId=null,loadingFixInterval=1e3,attachedTo=0;return{prevent:function(){signalR._.ieVersion<=8&&(0===attachedTo&&(loadingFixIntervalId=window.setInterval(function(){var tempFrame=createFrame();window.document.body.appendChild(tempFrame),window.document.body.removeChild(tempFrame),tempFrame=null},loadingFixInterval)),attachedTo++)},cancel:function(){1===attachedTo&&window.clearInterval(loadingFixIntervalId),attachedTo>0&&attachedTo--}}}();signalR.transports.foreverFrame={name:"foreverFrame",supportsKeepAlive:function(){return!0},iframeClearThreshold:50,start:function(connection,onSuccess,onFailed){var url,that=this,frameId=transportLogic.foreverFrame.count+=1,frame=createFrame(),frameLoadHandler=function(){connection.log("Forever frame iframe finished loading and is no longer receiving messages."),onFailed&&onFailed()||that.reconnect(connection)};return window.EventSource?void(onFailed&&(connection.log("Forever Frame is not supported by SignalR on browsers with SSE support."),onFailed())):(frame.setAttribute("data-signalr-connection-id",connection.id),loadPreventer.prevent(),url=transportLogic.getUrl(connection,this.name),url+="&frameId="+frameId,window.document.documentElement.appendChild(frame),connection.log("Binding to iframe's load event."),frame.addEventListener?frame.addEventListener("load",frameLoadHandler,!1):frame.attachEvent&&frame.attachEvent("onload",frameLoadHandler),frame.src=url,transportLogic.foreverFrame.connections[frameId]=connection,connection.frame=frame,connection.frameId=frameId,void(onSuccess&&(connection.onSuccess=function(){connection.log("Iframe transport started."),onSuccess()})))},reconnect:function(connection){var that=this;transportLogic.isConnectedOrReconnecting(connection)&&transportLogic.verifyLastActive(connection)&&window.setTimeout(function(){if(transportLogic.verifyLastActive(connection)&&connection.frame&&transportLogic.ensureReconnectingState(connection)){var frame=connection.frame,src=transportLogic.getUrl(connection,that.name,!0)+"&frameId="+connection.frameId;connection.log("Updating iframe src to '"+src+"'."),frame.src=src}},connection.reconnectDelay)},lostConnection:function(connection){this.reconnect(connection)},send:function(connection,data){transportLogic.ajaxSend(connection,data)},receive:function(connection,data){var cw,body,response;if(connection.json!==connection._originalJson&&(data=connection._originalJson.stringify(data)),response=connection._parseResponse(data),transportLogic.processMessages(connection,response,connection.onSuccess),connection.state===$.signalR.connectionState.connected&&(connection.frameMessageCount=(connection.frameMessageCount||0)+1,connection.frameMessageCount>signalR.transports.foreverFrame.iframeClearThreshold&&(connection.frameMessageCount=0,cw=connection.frame.contentWindow||connection.frame.contentDocument,cw&&cw.document&&cw.document.body)))for(body=cw.document.body;body.firstChild;)body.removeChild(body.firstChild)},stop:function(connection){var cw=null;if(loadPreventer.cancel(),connection.frame){if(connection.frame.stop)connection.frame.stop();else try{cw=connection.frame.contentWindow||connection.frame.contentDocument,cw.document&&cw.document.execCommand&&cw.document.execCommand("Stop")}catch(e){connection.log("Error occurred when stopping foreverFrame transport. Message = "+e.message+".")}connection.frame.parentNode===window.document.body&&window.document.body.removeChild(connection.frame),delete transportLogic.foreverFrame.connections[connection.frameId],connection.frame=null,connection.frameId=null,delete connection.frame,delete connection.frameId,delete connection.onSuccess,delete connection.frameMessageCount,connection.log("Stopping forever frame.")}},abort:function(connection,async){transportLogic.ajaxAbort(connection,async)},getConnection:function(id){return transportLogic.foreverFrame.connections[id]},started:function(connection){changeState(connection,signalR.connectionState.reconnecting,signalR.connectionState.connected)===!0&&$(connection).triggerHandler(events.onReconnect)}}}(window.jQuery,window),function($,window){var signalR=$.signalR,events=$.signalR.events,changeState=$.signalR.changeState,isDisconnecting=$.signalR.isDisconnecting,transportLogic=signalR.transports._logic;signalR.transports.longPolling={name:"longPolling",supportsKeepAlive:function(){return!1},reconnectDelay:3e3,start:function(connection,onSuccess,onFailed){var that=this,fireConnect=function(){fireConnect=$.noop,connection.log("LongPolling connected."),onSuccess?onSuccess():connection.log("WARNING! The client received an init message after reconnecting.")},tryFailConnect=function(error){return!!onFailed(error)&&(connection.log("LongPolling failed to connect."),!0)},privateData=connection._,reconnectErrors=0,fireReconnected=function(instance){window.clearTimeout(privateData.reconnectTimeoutId),privateData.reconnectTimeoutId=null,changeState(instance,signalR.connectionState.reconnecting,signalR.connectionState.connected)===!0&&(instance.log("Raising the reconnect event"),$(instance).triggerHandler(events.onReconnect))},maxFireReconnectedTimeout=36e5;connection.pollXhr&&(connection.log("Polling xhr requests already exists, aborting."),connection.stop()),connection.messageId=null,privateData.reconnectTimeoutId=null,privateData.pollTimeoutId=window.setTimeout(function(){!function poll(instance,raiseReconnect){var messageId=instance.messageId,connect=null===messageId,reconnecting=!connect,polling=!raiseReconnect,url=transportLogic.getUrl(instance,that.name,reconnecting,polling,!0),postData={};instance.messageId&&(postData.messageId=instance.messageId),instance.groupsToken&&(postData.groupsToken=instance.groupsToken),isDisconnecting(instance)!==!0&&(connection.log("Opening long polling request to '"+url+"'."),instance.pollXhr=transportLogic.ajax(connection,{xhrFields:{onprogress:function(){transportLogic.markLastMessage(connection)}},url:url,type:"POST",contentType:signalR._.defaultContentType,data:postData,timeout:connection._.pollTimeout,success:function(result){var minData,data,shouldReconnect,delay=0;connection.log("Long poll complete."),reconnectErrors=0;try{minData=connection._parseResponse(result)}catch(error){return void transportLogic.handleParseFailure(instance,result,error,tryFailConnect,instance.pollXhr)}null!==privateData.reconnectTimeoutId&&fireReconnected(instance),minData&&(data=transportLogic.maximizePersistentResponse(minData)),transportLogic.processMessages(instance,minData,fireConnect),data&&"number"===$.type(data.LongPollDelay)&&(delay=data.LongPollDelay),isDisconnecting(instance)!==!0&&(shouldReconnect=data&&data.ShouldReconnect,shouldReconnect&&!transportLogic.ensureReconnectingState(instance)||(delay>0?privateData.pollTimeoutId=window.setTimeout(function(){poll(instance,shouldReconnect)},delay):poll(instance,shouldReconnect)))},error:function(data,textStatus){var error=signalR._.transportError(signalR.resources.longPollFailed,connection.transport,data,instance.pollXhr);if(window.clearTimeout(privateData.reconnectTimeoutId),privateData.reconnectTimeoutId=null,"abort"===textStatus)return void connection.log("Aborted xhr request.");if(!tryFailConnect(error)){if(reconnectErrors++,connection.state!==signalR.connectionState.reconnecting&&(connection.log("An error occurred using longPolling. Status = "+textStatus+".  Response = "+data.responseText+"."),$(instance).triggerHandler(events.onError,[error])),(connection.state===signalR.connectionState.connected||connection.state===signalR.connectionState.reconnecting)&&!transportLogic.verifyLastActive(connection))return;if(!transportLogic.ensureReconnectingState(instance))return;privateData.pollTimeoutId=window.setTimeout(function(){poll(instance,!0)},that.reconnectDelay)}}}),reconnecting&&raiseReconnect===!0&&(privateData.reconnectTimeoutId=window.setTimeout(function(){fireReconnected(instance)},Math.min(1e3*(Math.pow(2,reconnectErrors)-1),maxFireReconnectedTimeout))))}(connection)},250)},lostConnection:function(connection){connection.pollXhr&&connection.pollXhr.abort("lostConnection")},send:function(connection,data){transportLogic.ajaxSend(connection,data)},stop:function(connection){window.clearTimeout(connection._.pollTimeoutId),window.clearTimeout(connection._.reconnectTimeoutId),delete connection._.pollTimeoutId,delete connection._.reconnectTimeoutId,connection.pollXhr&&(connection.pollXhr.abort(),connection.pollXhr=null,delete connection.pollXhr)},abort:function(connection,async){transportLogic.ajaxAbort(connection,async)}}}(window.jQuery,window),function($){function makeEventName(event){return event+eventNamespace}function map(arr,fun,thisp){var i,length=arr.length,result=[];for(i=0;i<length;i+=1)arr.hasOwnProperty(i)&&(result[i]=fun.call(thisp,arr[i],i,arr));return result}function getArgValue(a){return $.isFunction(a)?null:"undefined"===$.type(a)?null:a}function hasMembers(obj){for(var key in obj)if(obj.hasOwnProperty(key))return!0;return!1}function clearInvocationCallbacks(connection,error){var callback,callbacks=connection._.invocationCallbacks;hasMembers(callbacks)&&connection.log("Clearing hub invocation callbacks with error: "+error+"."),connection._.invocationCallbackId=0,delete connection._.invocationCallbacks,connection._.invocationCallbacks={};for(var callbackId in callbacks)callback=callbacks[callbackId],callback.method.call(callback.scope,{E:error})}function hubProxy(hubConnection,hubName){return new hubProxy.fn.init(hubConnection,hubName)}function hubConnection(url,options){var settings={qs:null,logging:!1,useDefaultPath:!0};return $.extend(settings,options),url&&!settings.useDefaultPath||(url=(url||"")+"/signalr"),new hubConnection.fn.init(url,settings)}var eventNamespace=".hubProxy",signalR=$.signalR;hubProxy.fn=hubProxy.prototype={init:function(connection,hubName){this.state={},this.connection=connection,this.hubName=hubName,this._={callbackMap:{}}},constructor:hubProxy,hasSubscriptions:function(){return hasMembers(this._.callbackMap)},on:function(eventName,callback){var that=this,callbackMap=that._.callbackMap;return eventName=eventName.toLowerCase(),callbackMap[eventName]||(callbackMap[eventName]={}),callbackMap[eventName][callback]=function(e,data){callback.apply(that,data)},$(that).bind(makeEventName(eventName),callbackMap[eventName][callback]),that},off:function(eventName,callback){var callbackSpace,that=this,callbackMap=that._.callbackMap;return eventName=eventName.toLowerCase(),callbackSpace=callbackMap[eventName],callbackSpace&&(callbackSpace[callback]?($(that).unbind(makeEventName(eventName),callbackSpace[callback]),delete callbackSpace[callback],hasMembers(callbackSpace)||delete callbackMap[eventName]):callback||($(that).unbind(makeEventName(eventName)),delete callbackMap[eventName])),that},invoke:function(methodName){var that=this,connection=that.connection,args=$.makeArray(arguments).slice(1),argValues=map(args,getArgValue),data={H:that.hubName,M:methodName,A:argValues,I:connection._.invocationCallbackId},d=$.Deferred(),callback=function(minResult){var source,error,result=that._maximizeHubResponse(minResult);$.extend(that.state,result.State),result.Progress?d.notifyWith?d.notifyWith(that,[result.Progress.Data]):connection._.progressjQueryVersionLogged||(connection.log("A hub method invocation progress update was received but the version of jQuery in use ("+$.prototype.jquery+") does not support progress updates. Upgrade to jQuery 1.7+ to receive progress notifications."),connection._.progressjQueryVersionLogged=!0):result.Error?(result.StackTrace&&connection.log(result.Error+"\n"+result.StackTrace+"."),source=result.IsHubException?"HubException":"Exception",error=signalR._.error(result.Error,source),error.data=result.ErrorData,connection.log(that.hubName+"."+methodName+" failed to execute. Error: "+error.message),d.rejectWith(that,[error])):(connection.log("Invoked "+that.hubName+"."+methodName),d.resolveWith(that,[result.Result]))};return connection._.invocationCallbacks[connection._.invocationCallbackId.toString()]={scope:that,method:callback},connection._.invocationCallbackId+=1,$.isEmptyObject(that.state)||(data.S=that.state),connection.log("Invoking "+that.hubName+"."+methodName),connection.send(data),d.promise()},_maximizeHubResponse:function(minHubResponse){return{State:minHubResponse.S,Result:minHubResponse.R,Progress:minHubResponse.P?{Id:minHubResponse.P.I,Data:minHubResponse.P.D}:null,Id:minHubResponse.I,IsHubException:minHubResponse.H,Error:minHubResponse.E,StackTrace:minHubResponse.T,ErrorData:minHubResponse.D}}},hubProxy.fn.init.prototype=hubProxy.fn,hubConnection.fn=hubConnection.prototype=$.connection(),hubConnection.fn.init=function(url,options){var settings={qs:null,logging:!1,useDefaultPath:!0},connection=this;$.extend(settings,options),$.signalR.fn.init.call(connection,url,settings.qs,settings.logging),connection.proxies={},connection._.invocationCallbackId=0,connection._.invocationCallbacks={},connection.received(function(minData){var data,proxy,dataCallbackId,callback,hubName,eventName;minData&&("undefined"!=typeof minData.P?(dataCallbackId=minData.P.I.toString(),callback=connection._.invocationCallbacks[dataCallbackId],callback&&callback.method.call(callback.scope,minData)):"undefined"!=typeof minData.I?(dataCallbackId=minData.I.toString(),callback=connection._.invocationCallbacks[dataCallbackId],callback&&(connection._.invocationCallbacks[dataCallbackId]=null,delete connection._.invocationCallbacks[dataCallbackId],callback.method.call(callback.scope,minData))):(data=this._maximizeClientHubInvocation(minData),connection.log("Triggering client hub event '"+data.Method+"' on hub '"+data.Hub+"'."),hubName=data.Hub.toLowerCase(),eventName=data.Method.toLowerCase(),proxy=this.proxies[hubName],$.extend(proxy.state,data.State),$(proxy).triggerHandler(makeEventName(eventName),[data.Args])))}),connection.error(function(errData,origData){var callbackId,callback;origData&&(callbackId=origData.I,callback=connection._.invocationCallbacks[callbackId],callback&&(connection._.invocationCallbacks[callbackId]=null,delete connection._.invocationCallbacks[callbackId],callback.method.call(callback.scope,{E:errData})))}),connection.reconnecting(function(){connection.transport&&"webSockets"===connection.transport.name&&clearInvocationCallbacks(connection,"Connection started reconnecting before invocation result was received.")}),connection.disconnected(function(){clearInvocationCallbacks(connection,"Connection was disconnected before invocation result was received.")})},hubConnection.fn._maximizeClientHubInvocation=function(minClientHubInvocation){return{Hub:minClientHubInvocation.H,Method:minClientHubInvocation.M,Args:minClientHubInvocation.A,State:minClientHubInvocation.S}},hubConnection.fn._registerSubscribedHubs=function(){var connection=this;connection._subscribedToHubs||(connection._subscribedToHubs=!0,connection.starting(function(){var subscribedHubs=[];$.each(connection.proxies,function(key){this.hasSubscriptions()&&(subscribedHubs.push({name:key}),connection.log("Client subscribed to hub '"+key+"'."))}),0===subscribedHubs.length&&connection.log("No hubs have been subscribed to.  The client will not receive data from hubs.  To fix, declare at least one client side function prior to connection start for each hub you wish to subscribe to."),connection.data=connection.json.stringify(subscribedHubs)}))},hubConnection.fn.createHubProxy=function(hubName){hubName=hubName.toLowerCase();var proxy=this.proxies[hubName];return proxy||(proxy=hubProxy(this,hubName),this.proxies[hubName]=proxy),this._registerSubscribedHubs(),proxy},hubConnection.fn.init.prototype=hubConnection.fn,$.hubConnection=hubConnection}(window.jQuery,window),function($){$.signalR.version="2.2.1"}(window.jQuery);